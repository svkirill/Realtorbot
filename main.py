import json
import telebot
from telebot.types import Message
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from Services.UserInputService import UserInputService
from Services.RealtorsService import RealtorsService
from Services.UserPagesRememberService import UserPagesRememberService
from Services.UserService import UserService
from Services.CompanyService import CompanyService
import os.path
from Models.Realtor import  RealtorHelper
class MainService:
    bot = telebot.TeleBot('6939293439:AAGacBdkDXD-hBZ5sVHStGnkRrJ8tUyPWQY')
    addrealtortext = '–î–æ–±–∞–≤–∏—Ç—å —Ä–∏–µ–ª—Ç–æ—Ä–∞'    # TODO - –≤—ã–Ω–µ—Å–µ–Ω–∏–µ
    showrealtors = "–°–ø–∏—Å–æ–∫ —Ä–∏–µ–ª—Ç–æ—Ä–æ–≤"
    backmenu = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    adminbutton = '–°–∫–∞—á–∞—Ç—å –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'

    @staticmethod
    @bot.message_handler(commands=['start'])
    def start_handler(message : Message):
        user = UserService.GetUserByContext(message)

        MainService.send_start_keyboard(user, "üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üëã")

    @staticmethod
    def send_start_keyboard(user, message):

        keyboard = ReplyKeyboardMarkup()
        button1 = KeyboardButton(text=MainService.addrealtortext)
        button2 = KeyboardButton(text=MainService.showrealtors)
        keyboard.add(button1)
        keyboard.add(button2)

        if user.role.name == 'admin':
            button3 = KeyboardButton(text=MainService.adminbutton)
            keyboard.add(button3)

        #MainService.bot.send_document(chat_id, —Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª, –Ω–∞–∑–≤–∞–Ω–∏–µ)
        MainService.bot.send_message(user.chat_id, message, reply_markup=keyboard)


    @staticmethod
    @bot.message_handler(content_types=['text'])
    def start(message : Message):
        user = UserService.GetUserByContext(message)

        if message.text == MainService.addrealtortext:

            MainService.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ªe—Ñ–æ–Ω–∞")
            MainService.bot.register_next_step_handler(message, MainService.get_name, key='phonenumber')
        elif message.text == MainService.showrealtors or message.text == RealtorsService.BACK_TEXT or message.text == RealtorsService.NEXT_TEXT:
            page = 1
            if message.text == RealtorsService.NEXT_TEXT:
                page = UserPagesRememberService.NextPageInvoked(message.chat.id)
            elif message.text == RealtorsService.BACK_TEXT:
                page = UserPagesRememberService.BackPageInvoked(message.chat.id)
            else:
                UserPagesRememberService.UserGetRealtorsList(user.chat_id)
            MainService.bot.send_message(message.from_user.id,"üëá–°–º–æ—Ç—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.üëá", reply_markup=RealtorsService.get_realtors_menu(page))

        elif message.text == RealtorsService.backmenuu:
            MainService.send_start_keyboard(user, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        elif message.text == MainService.adminbutton:
            if user.role.name == 'admin':
                MainService.SendDataBaseToUser(user.chat_id, [RealtorsService.storagePath, UserService.storagePath])
        else:
            realtorInfo = RealtorsService.GetRealtorInfo(message.text)
            if realtorInfo != None:
                # create keyboard
                keyboard = InlineKeyboardMarkup()
                uniqueCode = RealtorHelper.GetUniqueCode(message.text)
                button1 = InlineKeyboardButton(text='-–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤-', callback_data=f'SendReview_{uniqueCode}')
                button2 = InlineKeyboardButton(text='-–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é-', callback_data=f'ChangeInfo_{uniqueCode}')
                button3 = InlineKeyboardButton(text='-–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã-', callback_data=f'Reviews_{uniqueCode}')
                keyboard.add(button1)
                keyboard.add(button2)
                keyboard.add(button3)

                MainService.bot.send_message(user.chat_id, realtorInfo, reply_markup=keyboard)
            else:
                MainService.bot.send_message(user.chat_id,"üòê–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüòê")

    func_to_question = {
        RealtorsService.CHANGE_NAME_PARAM: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è...",
        RealtorsService.CHANGE_SURNAME_PARAM: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é...",
        RealtorsService.CHANGE_PHONENUMBER_PARAM: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...',
        RealtorsService.CHANGE_SELFEMPLOYED_PARAM: '',
        RealtorsService.CHANGE_COMPANY_PARAM: "Chose company...",
        "PageNum": "Chose company..."
    }

    @staticmethod
    @bot.callback_query_handler(func=lambda call: True)
    def pressed_handler(call):
        user = UserService.GetUserByContext(call.message)

        splitedData = call.data.split("_")
        func = splitedData[0]
        uniqueCode = splitedData[1]
        print(func)
        if func == "SendReview":
            m_id = call.message.message_id
            id = call.message.chat.id
            MainService.bot.edit_message_text(chat_id=id,  message_id=m_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤')
            #MainService.bot.send_message(user.chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤")
            MainService.bot.register_next_step_handler(call.message, MainService.save_review_handler, uniqueCode=uniqueCode)
        elif func == "ChangeInfo":
            m_id = call.message.message_id
            id = call.message.chat.id
            keyboard = InlineKeyboardMarkup()
            button1 = InlineKeyboardButton(text='–ò–º—è', callback_data=f'{RealtorsService.CHANGE_NAME_PARAM}_{uniqueCode}')
            button2 = InlineKeyboardButton(text='–§–∞–º–∏–ª–∏—è', callback_data=f'ChangeSurname_{uniqueCode}' )
            button3 = InlineKeyboardButton(text='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data=f'ChangePhoneNumber_{uniqueCode}')
            button4 = InlineKeyboardButton(text='Company', callback_data=f'ChangeCompany_{uniqueCode}')
            print(len(f'ChangePhoneNumber_{uniqueCode}'.encode('utf-8')))
            keyboard.add(button1)
            keyboard.add(button2)
            keyboard.add(button3)
            keyboard.add(button4)
            print(keyboard)
            MainService.bot.edit_message_text(chat_id=id,  message_id=m_id, text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
        elif func == "PageNum" or func == RealtorsService.CHANGE_NAME_PARAM or func == RealtorsService.CHANGE_SURNAME_PARAM or func == RealtorsService.CHANGE_PHONENUMBER_PARAM or func == RealtorsService.CHANGE_COMPANY_PARAM:
            m_id = call.message.message_id
            id = call.message.chat.id

            replyMarkup = None

            if func == RealtorsService.CHANGE_COMPANY_PARAM:
                replyMarkup = CompanyService.get_companies_menu(1)
                print(replyMarkup)

            if func == "PageNum":
                print(int(uniqueCode))
                replyMarkup = CompanyService.get_companies_menu(int(uniqueCode))
                print(replyMarkup)

            MainService.bot.edit_message_text(chat_id=id,  message_id=m_id, text= MainService.func_to_question.get(func), reply_markup=replyMarkup)
            MainService.bot.register_next_step_handler(call.message, MainService.change_info_handler, callback_data=call.data)
        elif func == "Reviews":
            m_id = call.message.message_id
            id = call.message.chat.id

            text = "–û—Ç–∑—ã–≤—ã –æ —Ä–∏—ç–ª—Ç–æ—Ä–µ:\n"

            realtor = RealtorsService.FindbyCode(uniqueCode)

            if realtor is not None:
                if len(realtor.reviews) == 0:
                    text = "–û—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç."

                for review in realtor.reviews:
                    text += f"- {review}\n"

                MainService.bot.edit_message_text(chat_id=id,  message_id=m_id, text=text)



    @staticmethod
    def SendDataBaseToUser(chat_id, paths:list):
        for path in paths:
            if os.path.exists(path):
                with open(path, 'rb') as file:
                    MainService.bot.send_document(chat_id, file)

    @staticmethod   # TODO - –≤—ã–Ω–µ—Å–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    def get_name(message : Message, key):
        user = UserService.GetUserByContext(message)

        UserInputService.process_data(message, key)

        MainService.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–∏–µ–ª—Ç–æ—Ä–∞")
        MainService.bot.register_next_step_handler(message, MainService.end_data_handler, key='name')

    @staticmethod  # TODO - –≤—ã–Ω–µ—Å–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    def save_review_handler(message: Message, uniqueCode):
        user = UserService.GetUserByContext(message)

        # –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞ –∏–∑ message.text –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ —Ä–∏—ç–ª—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –Ω–∞–π–¥–µ—à—å –ø–æ uniqueCode
        review = message.text
        result = RealtorsService.AddReviewToRealtor(review, uniqueCode)

        if result:
            MainService.bot.send_message(user.chat_id, "ü§ù–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!ü§ù")
        else:
            MainService.bot.send_message(user.chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    @staticmethod  # TODO - –≤—ã–Ω–µ—Å–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    def change_info_handler(message: Message, callback_data):
        user = UserService.GetUserByContext(message)

        data = message.text
        splitedData = callback_data.split("_")
        func = splitedData[0]
        uniqueCode = splitedData[1]
        print(f"Old unique code: {uniqueCode}")
        # –ü–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–∏—ç–ª—Ç–æ—Ä–∞
        if user.role.name == "admin":
            uniqueCode = RealtorsService.ChangeRaltorParam(uniqueCode, func, data)
            print(f"New unique code: {uniqueCode}")
            MainService.bot.send_message(user.chat_id, '–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã.')

            chatIds_to_resend_keyboard = UserPagesRememberService.CheckResendChangedPages(uniqueCode)
            MainService.ResendKeyBoardForUsers(chatIds_to_resend_keyboard)
        else:
            MainService.bot.send_message(user.chat_id, '–í–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ')

    @staticmethod
    def ResendKeyBoardForUsers(chat_ids:list):
        for chat_id in chat_ids:
            MainService.bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤ –Ω–∞ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ.",
                                         reply_markup=RealtorsService.get_realtors_menu(UserPagesRememberService.GetCurrentUserPage(chat_id)))


    @staticmethod   # TODO - –≤—ã–Ω–µ—Å–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    def end_data_handler(message: Message, key):
        user = UserService.GetUserByContext(message)

        UserInputService.process_data(message, key)
        RealtorsService.process_realtor_data(message.from_user.id)
        MainService.bot.send_message(message.from_user.id, f"–°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    @staticmethod
    def start():
        RealtorsService.InitData()
        #UserService.InitData()
        CompanyService.InitData()

        for user in UserService.GetUsers():
            MainService.send_start_keyboard(user, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...")

        MainService.bot.polling(none_stop=True, interval=0)

if __name__ == "__main__":
    MainService.start()
